name: Deploy to Railway

# 添加並發控制
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [production]

env:
  RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      # 保留緩存配置
      - name: Cache pnpm modules
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      # 使用 --no-frozen-lockfile 寬鬆驗證
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Set up environment variables
        run: |
          echo "Setting up environment variables..."
          echo "${{ secrets.ENV_PRODUCTION }}" > .env
          
      - name: Generate Prisma Client & Build Projects
        run: |
          echo "Generating Prisma Client..."
          pnpm exec nx prisma:g cts-back-end
          echo "Building projects..."
          pnpm exec nx deploy cts-back-end

      - name: Prepare deployment files
        run: |
          echo "Preparing deployment files..."
          cp .env dist/ctsb/          
          cp apps/cts-front-end/deployment/* dist/ctsf/

      - name: Install and Configure Railway CLI
        run: |
          RAILWAY_TOKEN=${{ secrets.RAILWAY_TOKEN }} railway run
          echo "Installing Railway CLI..."
          pnpm install -g @railway/cli
          
          echo "Verifying Railway CLI configuration..."
          if ! railway whoami; then
            echo "Railway authentication failed"
            exit 1
          fi

      - name: Deploy Backend
        id: deploy-backend
        if: success()
        working-directory: dist/ctsb
        run: |
          RAILWAY_TOKEN=${{ secrets.RAILWAY_TOKEN }} railway run
          echo "Linking backend to Railway project..."
          if ! railway link ${{ secrets.RAILWAY_PROJECT_ID }} --environment production; then
            echo "Failed to link backend project"
            exit 1
          fi
          
          echo "Deploying backend service..."
          if ! railway up --service ${{ secrets.RAILWAY_SERVICE_CTSB_ID }}; then
            echo "Backend deployment failed"
            exit 1
          fi

      - name: Deploy Frontend
        id: deploy-frontend
        if: success()
        working-directory: dist/ctsf
        run: |
          RAILWAY_TOKEN=${{ secrets.RAILWAY_TOKEN }} railway run
          echo "Linking frontend to Railway project..."
          if ! railway link ${{ secrets.RAILWAY_PROJECT_ID }} --environment production; then
            echo "Failed to link frontend project"
            exit 1
          fi
          
          echo "Deploying frontend service..."
          if ! railway up --service ${{ secrets.RAILWAY_SERVICE_CTSF_ID }}; then
            echo "Frontend deployment failed"
            exit 1
          fi

      - name: Check deployment status # 確保即使前面步驟失敗也會執行
        if: always()
        run: |
          RAILWAY_TOKEN=${{ secrets.RAILWAY_TOKEN }} railway run
          if [ "${{ steps.deploy-backend.outcome }}" == "failure" ]; then
            echo "Backend deployment failed"
            railway logs --service ${{ secrets.RAILWAY_SERVICE_CTSB_ID }}
          fi
          if [ "${{ steps.deploy-frontend.outcome }}" == "failure" ]; then
            echo "Frontend deployment failed"
            railway logs --service ${{ secrets.RAILWAY_SERVICE_CTSF_ID }}
          fi
          if [ "${{ steps.deploy-backend.outcome }}" == "failure" ] || [ "${{ steps.deploy-frontend.outcome }}" == "failure" ]; then
            exit 1
          fi

      - name: Wait for deployments
        if: success()
        run: |
          echo "Waiting for deployments to stabilize..."
          sleep 45

      - name: Verify deployments
        if: success()
        timeout-minutes: 5  # 添加超時限制
        run: |
          function check_health {
            local url=$1
            local service=$2
            local RETRY_COUNT=0
            local MAX_RETRIES=3

            until curl --output /dev/null --silent --fail "$url"; do
              if [ ${RETRY_COUNT} -eq ${MAX_RETRIES} ]; then
                echo "$service health check failed after ${MAX_RETRIES} attempts"
                return 1
              fi
              RETRY_COUNT=$((RETRY_COUNT+1))
              echo "Retrying $service health check (${RETRY_COUNT}/${MAX_RETRIES})..."
              sleep 10
            done
            echo "$service is healthy"
            return 0
          }

          echo "Verifying backend deployment..."
          check_health "https://star-api.puraliena.com/api/health" "Backend"

          echo "Verifying frontend deployment..."
          check_health "https://star.puraliena.com" "Frontend"

      - name: Final deployment verification
        if: success()
        run: |
          RAILWAY_TOKEN=${{ secrets.RAILWAY_TOKEN }} railway run
          echo "Checking final deployment status..."
          railway status
          echo "Deployment complete!"
